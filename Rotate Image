brute force - take a new matrix and store in that

optimal approach 1 - take a vector and store all the values column by column and then put the values in the matrix in reverse order(space complexity is high but time complexity is less)

optimal approach 2 - transpose the matrix and then reverse each row(space complexity is constant, but time complexity is higher)

code(optimal approach 1)
void rotate(vector<vector<int>>& matrix) {
        vector<int> vec;
        int i = 0, j = 0;
        for(int i = 0;i<matrix.size();i++)
        {
            for(int j = 0;j<matrix.size();j++)
            {
                vec.push_back(matrix[j][i]);
            }
        }
        int k = vec.size()-1;
        for(int i = matrix.size()-1;i>=0;i--)
        {
            for(int j = 0;j<matrix.size();j++)
            {
                matrix[i][j] = vec[k];
                k--;
            }
        }
        
    }

code(optimal approach 2)
void rotate(vector < vector < int >> & matrix) {
    int n = matrix.size();
    //transposing the matrix
    for (int i = 0; i < n; i++) {
    for (int j = 0; j < i; j++) {
        swap(matrix[i][j], matrix[j][i]);
    }
    }
    //reversing each row of the matrix
    for (int i = 0; i < n; i++) {
    reverse(matrix[i].begin(), matrix[i].end());
    }
}

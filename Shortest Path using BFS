Code:
vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        // code here
        vector<int> adj[N];
        queue<pair<int, int>> q;
        vector<int> distance(N , INT_MAX);
        for(int i = 0;i<edges.size();i++)
        {
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        distance[src] = 0;
        q.push({src, 0});
        while(!q.empty())
        {
            int curr = q.front().first;
            int steps = q.front().second;
            q.pop();
            for(auto i : adj[curr])
            {
                int dist = min((steps+1), distance[i]);
                if(dist==steps+1)
                {
                    distance[i] = dist;
                    q.push({i, steps+1});
                }
            }
            steps++;
        }
        for(int i = 0;i<distance.size();i++)
        {
            if(distance[i]==INT_MAX)
                distance[i] = -1;
        }
        return distance;
    }

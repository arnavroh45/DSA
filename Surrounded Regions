COde:
void dfs(vector<vector<int>> &visited, int r, int c, vector<vector<char>> board, vector<vector<int>> directions)
    {
        
        visited[r][c] = 1;
        for(auto it : directions)
        {
            int rr = r+it[0];
            int cc = c+it[1];
            if(rr>=0 && rr<board.size() && cc>=0 && cc<board[0].size() && board[rr][cc]=='O' && !visited[rr][cc])
            {
                dfs(visited, rr, cc, board, directions);
            }
        }
    }
    void solve(vector<vector<char>>& board) {
        vector<vector<int>> visited(board.size(), vector<int>(board[0].size(), 0));
        vector<vector<int>> directions = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        for(int j = 0;j<board[0].size();j++)
        {
            if(board[0][j]=='O' && !visited[0][j])
                dfs(visited, 0, j, board, directions);
            
            if(board[board.size()-1][j]=='O' && !visited[board.size()-1][j])
                dfs(visited, board.size()-1, j, board, directions);
        }
        for(int j = 1;j<board.size()-1;j++)
        {
            if(board[j][0]=='O' && !visited[j][0])
                dfs(visited, j, 0, board, directions);
            
            if(board[j][board[0].size()-1]=='O' && !visited[j][board[0].size()-1])
                dfs(visited, j, board[0].size()-1, board, directions);
        }
        for(int i = 0 ;i<board.size();i++)
        {
            for(int j = 0;j<board[0].size();j++)
            {
                if(board[i][j]=='O' && !visited[i][j])
                {
                    board[i][j] = 'X';
                }
            }
        }

    }

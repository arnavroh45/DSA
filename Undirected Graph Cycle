Approach: We keep a note of the parent node as well, in this and compare the current node to the parent node, if they are same we ignore else we return true

Code:
bool detect(int i, int V, vector<int> adj[], vector<int> &visited)
    {
        visited[i] = 1;
        queue<pair<int, int>> q;
        q.push({i, -1});
        while(!q.empty())
        {
            int curr = q.front().first;
            int parent = q.front().second;
            q.pop();
            for(auto j : adj[curr])
            {
                if(!visited[j])
                {
                    visited[j]=1;
                    q.push({j, curr});
                }
                else if(parent!=j)
                    return true;
            }
        }
        
    }
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
       
        vector<int> visited(V, 0);
        for(int i = 0 ;i < V;i++)
        {
            if(!visited[i])
            {
                if(detect(i, V, adj, visited))
                    return true;
            }
        }
        return false;
    }

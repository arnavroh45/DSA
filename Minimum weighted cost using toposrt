void topo(int i, vector<pair<int, int>> adj[], int visited[], stack<int> &st)
    {   
        visited[i] = 1;
        for(auto ko : adj[i])
        {
            int v = ko.first;
            if(!visited[v])
            {
                topo(v, adj, visited, st);
            }
        }
        st.push(i);  
    }
    vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        vector<pair<int, int>> adj[N];
        for(int i = 0;i<edges.size();i++)
        {
            int u = edges[i][0];
            int v = edges[i][1];
            int cost = edges[i][2];
            adj[u].push_back({v, cost});
        }
        int visited[N] = {0};
        stack<int> st;
        for(int i = 0;i<N;i++)
        {
            if(!visited[i])
                topo(i, adj, visited, st);
        }
        vector<int> dist(N, 1e9);
        dist[0] = 0;
        while(!st.empty())
        {
            int node = st.top();
            st.pop();
            for(auto it : adj[node])
            {
                int v = it.first;
                int wt = it.second;
                if(dist[node] + wt < dist[v])
                    dist[v] = dist[node] + wt;
            }
        }
        for(int i = 0;i<dist.size();i++)
        {
            if(dist[i]==1e9)
                dist[i] = -1;
        }
        return dist;
    }

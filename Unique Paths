Memoization:
int solve(int row, int col, int m, int n, vector<vector<int>> &dp)
    {
        if(row<0 || col<0)
            return 0;
        if(row==0 && col==0)
            return 1;
        if(dp[row][col]!=-1)
            return dp[row][col];
        int left = solve(row, col-1, m, n, dp); 
        int up = solve(row-1, col, m, n, dp);
        return dp[row][col] = left+up;
        
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int> (n, -1));
        return solve(m-1, n-1, m, n, dp);
        
    }

Tabulation:
int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int> (n, 0));
        dp[m-1][n-1] = 1;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
            // Base condition: If we are at the top-left cell (0, 0), there is one way.
                if (i == 0 && j == 0) {
                    dp[i][j] = 1;
                    continue; // Skip the rest of the loop and continue with the next iteration.
                }

            // Initialize variables to store the number of ways from the cell above (up) and left (left).
            int up = 0;
            int left = 0;

            // If we are not at the first row (i > 0), update 'up' with the value from the cell above.
            if (i > 0)
                up = dp[i - 1][j];

            // If we are not at the first column (j > 0), update 'left' with the value from the cell to the left.
            if (j > 0)
                left = dp[i][j - 1];

            // Calculate the number of ways to reach the current cell by adding 'up' and 'left'.
            dp[i][j] = up + left;
        }
    }

    // The result is stored in the bottom-right cell (m-1, n-1).
    return dp[m - 1][n - 1];
    }

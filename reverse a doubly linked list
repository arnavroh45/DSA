// C++ code to Reverse a doubly linked list,
// using two pointers
#include <iostream>
using namespace std;
class Node {
  public:
    int data;
    Node *next;
    Node *prev;
    Node(int new_data) {
        data = new_data;
        next = NULL;
        prev = NULL;
    }
};

// Function to reverse a doubly linked list
Node *reverse(Node *head) {

    // If the list is empty or has only one node,
      // return the head as is
    if (head == nullptr || head->next == nullptr)
        return head;

    Node *prevNode = NULL;
    Node *currNode = head;

    // Traverse the list and reverse the links
    while (currNode != nullptr) {
      
          // Swap the next and prev pointers
        prevNode = currNode->prev;
        currNode->prev = currNode->next;

        currNode->next = prevNode;
      
          // Move to the next node in the original list 
          // (which is now previous due to reversal)
        currNode = currNode->prev;
    }

    // The final node in the original list
    // becomes the new head after reversal
    return prevNode->prev;
}
void printList(Node *node) {
    while (node != nullptr) {
        cout << node->data << " ";
        node = node->next;
    }
    cout << endl;
}

int main() {
  
    // Create a doubly linked list: 
      // 1 <-> 2 <-> 3 <-> 4
    Node *head = new Node(1);
    head->next = new Node(2);
    head->next->prev = head;
    head->next->next = new Node(3);
    head->next->next->prev = head->next;
    head->next->next->next = new Node(4);
    head->next->next->next->prev = head->next->next;
    cout << "Original Doubly Linked List" << endl;
    printList(head);
    head = reverse(head);
    cout << "Reversed Doubly Linked List" << endl;
    printList(head);
    return 0;
}


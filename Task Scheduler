Approach: keep track of the frequency, sort them using priority_queue and then take a window of n+1(+1 because if we want to keep it idle) and iterate over the queue and repeat the process unitl queue is empty
lastly if the queue is empty but there are elements still in the store, then add the number of elements in the count variable. 

Code:
int leastInterval(vector<char>& tasks, int n) {
        unordered_map<char, int> umap;
        for(auto i:tasks)
            umap[i]++;
        priority_queue<int> pq;
        for(auto i: umap)
            pq.push(i.second);
        int count = 0;
        while(!pq.empty())
        {
            vector<int> store;
            for(int i = 1;i<=n+1;i++)
            {
                if(!pq.empty())
                {
                    int f = pq.top();
                    pq.pop();
                    f--;
                    store.push_back(f);
                }
            }
            for(auto i: store)
            {
                if(i)
                    pq.push(i);
            }
            if(pq.empty())
                count += store.size();
            else
                count += n+1;

        }
        return count;
    }
